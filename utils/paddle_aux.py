
# This file is generated by PaConvert ToolKit, please Don't edit it!
import paddle

def reshape(self, *args, **kwargs):
    if args:
        if len(args)==1 and isinstance(args[0], (tuple, list)):
            return paddle.reshape(self, args[0])
        else:
            return paddle.reshape(self, list(args))
    elif kwargs:
        assert 'shape' in kwargs
        return paddle.reshape(self, shape=kwargs['shape'])

setattr(paddle.Tensor, 'reshape', reshape)

def _FUNCTIONAL_PAD(x, pad, mode='constant', value=0.0, data_format='NCHW'):
    if len(x.shape) * 2 == len(pad) and mode == "constant":
        pad = paddle.to_tensor(pad, dtype="int32").reshape((-1, 2)).flip([0]).flatten().tolist()
    return paddle.nn.functional.pad(x, pad, mode, value, data_format)

def div(self, *args, **kwargs):
    if 'other' in kwargs:
        y = kwargs['other']
    elif 'y' in kwargs:
        y = kwargs['y']
    else:
        y = args[0]

    if not isinstance(y, paddle.Tensor):
        y = paddle.to_tensor(y)

    res = paddle.divide(self, y)

    if 'rounding_mode' in kwargs:
        rounding_mode = kwargs['rounding_mode']
        if rounding_mode=='trunc':
            res = paddle.trunc(res)
        elif rounding_mode=='floor':
            res = paddle.floor(res)

    return res

setattr(paddle.Tensor, 'div', div)
setattr(paddle.Tensor, 'divide', div)
